# YAML configuration file for use with the CLI tool mp2p-icp-run or
# programatically from function mp2p_icp::icp_pipeline_from_yaml()
#
class_name: mp2p_icp::ICP

# See: mp2p_icp::Parameter
params:
  maxIterations: 100
  minAbsStep_trans: 1e-4
  minAbsStep_rot: 1e-4

  debugPrintIterationProgress: true  # Print progress
  generateDebugFiles: true
  #debugFileNameFormat: "icp-run-$LOCAL_ID$LOCAL_LABEL-to-$GLOBAL_ID$GLOBAL_LABEL.icplog"

solvers:
#  - class: mp2p_icp::Solver_GaussNewton
#    params:
#     maxIterations: 3

  - class: mp2p_icp::Solver_Horn
    params:
      pairingsWeightParameters:
        # scale-based outlier detector
        use_scale_outlier_detector: true
        scale_outlier_threshold: 1.5
        # An optional "a priori" term (default=false)
        use_robust_kernel: false
        #robust_kernel_param: 0.1 # [degrees]
        #robust_kernel_scale: 400.0

# Sequence of one or more pairs (class, params) defining mp2p_icp::Matcher
# instances to pair geometric entities between pointclouds.
matchers:
  - class: mp2p_icp::Matcher_Points_DistanceThreshold
    params:
      threshold: 0.01
      #pairingsPerPoint: 1
      #maxLocalPointsPerLayer: 0  # !=0 means subsample "local" point cloud
      runFromIteration: 0  # "from 0 to 0" means "all"
      runUpToIteration: 0
      pointLayerMatches:
        - {global: "raw", local: "decimated", weight: 1.0}
#  - class: mp2p_icp::Matcher_Point2Plane
#    params:
#      #maxLocalPointsPerLayer: 0  # !=0 means subsample "local" point cloud
#      distanceThreshold: 0.40
#      planeEigenThreshold: 1e-4
#      knn: 7
#      runFromIteration: 0  # "from 0 to 0" means "all"
#      runUpToIteration: 0
#      pointLayerMatches:
#        - {global: "raw", local: "decimated", weight: 1.0}

quality:
  - class: mp2p_icp::QualityEvaluator_PairedRatio
    params:
     threshold: 0.10

# Filters for point cloud #1 (reference) and #2 (mobile):
#
# One filter object will be created for each entry, instancing the given class,
# and with the given parameters. Filters are run in definition order on the
# input pointcloud_t object.
#
filters_pc1:
  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      output_pointcloud_layer: 'decimated'
      voxel_filter_resolution: 0.01  # [m]
      use_voxel_average: true
      bounding_box_min: [-1, -1, -1]
      bounding_box_max: [ 1,  1,  1]

filters_pc2:
  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      output_pointcloud_layer: 'decimated'
      voxel_filter_resolution: 0.01  # [m]
      use_voxel_average: true
      bounding_box_min: [-1, -1, -1]
      bounding_box_max: [ 1,  1,  1]
